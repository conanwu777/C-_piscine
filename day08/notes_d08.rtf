{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15460\viewh25460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 STL (standard template library)\
\

\b0 1. Containers (generic template)\
2. Algorithms allowing to make operations on a collection\
\

\b Containers\
\

\b0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Std::list<int> \'97\'97\'97\'97\'97\'97\'97list containing ints\
Lst1.push_back(1)\
Lst1.push_back(42)\
\

\b Iterator:
\b0 \
	STL equivalent of pointers\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Std::list<int>::const_iterator	it;\
Std::list<int>::const_iterator	it = lst1.end(); \'97\'97\'97\'97pointing to the last element\
For (it = lst1.begin(); it != ite; ++it)\
\{\
	std::cout << *it << std:endl;\
\}\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
*we have simple iterators instead of const_iterator\
*all container classes may use iterators, not only lists\
\

\b Map:
\b0 \
	C++ version of hash table\
* don\'92t have to use strings as keys\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Std::map<std::string, IOperation*>   map1;\
	\'97\'97\'97\'97Ioperation map indeed on strings\
map1[\'93opA\'94] = new OperationA\
\
\

\b Vector:\
	
\b0 basically an array
\b \

\b0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Std::vector<int>	v1;\
Srd::vector<int>	v2(42, 100) \'97\'97\'97\'9742 entries each with value 100\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\b Algorithms:
\b0 \
\
For each operation: (apply operation on each element)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
for_each(lst.begin(), lst.end(), displayInt)\
	\'97\'97takes two elements in the list, apply the function to each elem between\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
C++.com; has 10 algorithms, read\
}